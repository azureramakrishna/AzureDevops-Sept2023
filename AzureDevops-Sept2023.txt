
1 VM -> portal 
1000 VM -> Infrastructure as a code (IAC) 

VM 

Project - SAANIK  - Dev (Roshan) - code

2 VM 
2 WebApps
1 VNET/SNET 
10 SA 
5 SQL DB 
1 APP Insights 
1 Keyvault 


Nonprod    Manusha
Prod

ARM Templates:
-------------
Structure / Elements / Components of ARM Templates

Schema
ContentVersion
Parameters
Variables 
Resources 
Outputs

Getting started with ARMTemplates:
---------------------------------
1. Install Vscode -> https://code.visualstudio.com/download
2. Extensions ->  you need Visual Studio Code, with the Azure Resource Manager tools extension installed


Portal
Powershell
AzureCLI

IAC: 

ARMTemplates
Terraform
Bicep


Deploy the template:
-------------------

Powershell:
----------
New-AzResourceGroup -Name arm-vscode -Location eastus

New-AzResourceGroupDeployment -ResourceGroupName arm-vscode -TemplateFile ./azuredeploy.json -TemplateParameterFile ./azuredeploy.parameters.json


AzureCLI:
--------
az group create --name arm-vscode --location eastus

az deployment group create --resource-group arm-vscode --template-file azuredeploy.json --parameters azuredeploy.parameters.json


Functions:
---------
resouregroup().location
concat (arg1, arg2, arg3 )
dependson
copyindex() - Multiple resources 
toLower
ResourceId



VNET 
SNET
SA
NSG
Publicip
NIC
OSDisk
VM

test-vm-osdis-1

ARMTemplates Deployment modes:
-----------------------------
1. Complete mode
2. Incremental mode 

ARMTemplates Interview Questions:
--------------------------------
1. what is IAC ?
2. Why do we use it
3. What are the benifits of using IAC 
4. What are ARMTemplates ?
5. In which format they are written 
6. Explain structure/components/sceliten of ARMTemplate
7. what is the difference between parameters and Variables 
8. How do you deploy the ARMteampltes 
9. what is the powershell command to do the ARMTemplate deployment 
10. What is the azure cli command to do the ARMTemplate deployment 
11. what are the functions used while writting the template 
12. what is the difference between incremental mode vs complete mode 
13. what is the function that you use to do the multi resources deployment 

Azure - ARMTemplate & Bicep
AWS - CloudFormation
Terraform  

Terraform: Infrastructure as a code 
---------

ARMteampltes											Terraform 
------------											---------
1. IAC Tool												1. IAC Tool 
2. Specific to Azure 									2. Opensource (Azure, AWS, GCP, Alibaba, OCI, etc)
3. Format - JSON										3. Format - HCL (Hashicorp configuration language)
4. File extension - .json 								4. File extension - .tf 
5. template.json 										5. main.tf
   parameters.json 											variables.tf
6. Schema 												6. Terraform Building blocks 
   ContentVersion											Provider
   Variables												Resources
   Parameters												Outputs
   Functions
   Resources 
   Outputs 
7. Deploy using Powershell/CLI 							7. Terraform Lifecycle 
   New-AzResourceGroupDeployment `							Terraform Init
   -ResourceGroupName 'test' `								Terraform fmt
   -TemplateFile .\template.json `							Terraform validate
   -TemplateParameterFile .\parameters.json `				Terraform plan	
   -Verbose													Terraform apply 
															Terraform destroy 

Getting started with Terraform:
------------------------------
1. Install terraform --> https://developer.hashicorp.com/terraform/downloads
2. Validate -> Open CMD --> enter terraform 
3. VSCode extensions -> HashiCorp Terraform & Azure Terraform
4. Terraform Providers: https://registry.terraform.io/browse/providers
	Azure - Azurerm
	AWS - aws
	GCP - google
5. Terraform varibles types: https://developer.hashicorp.com/terraform/language/expressions/types
6. Terraform Lower function: https://developer.hashicorp.com/terraform/language/functions/lower

   Terraform init - It will install the provider plugins 
   Terraform fmt - Format the template 
   Terraform validate - Validate the template 
   Terraform plan - Plan for the deployment 
   Terraform apply - Starts the provisioining the resources 
   Terraform destroy - delete the resources 


**** terraform.tfstate - it store the state of the deployment in JSON format
     Keep it in the remote location - Azure Storage Account 
	 Azure Terraform backend: https://developer.hashicorp.com/terraform/language/settings/backends/azurerm
	 

Terraform Datasources:
---------------------
data source to access information about an existing resources

Authenticating using service principal:

  client_id       = "14651c27-1aad-4251-b759-b208f67cac4a"
  client_secret   = "qjo8Q~uFvyJQ7ncn2Dx.L_jv4yF0J-Dhy_gAddBg"
  tenant_id       = "459865f1-a8aa-450a-baec-8b47a9e5c904"
  subscription_id = "6e4924ab-b00c-468f-ae01-e5d33e8786f8"
  
variables.tf     vs      variables.auto.tfvars


terraform validate   vs   terraform plan


count.index  --> to deploy multiple resources using single template

Terraform Modules:
-----------------
Reusing the existing terraform configuration code

- Local Modules 
- Remote Modules 


Terraform Interview questions:
-----------------------------
1. What is terraform 
2. why do we use terraform instead of ARMtemplates 
3. what are the building blocks of terraform 
4. what is the terraform workflow and explain each command 
5. what are the commands that you use to deploy the terraform templates 
6. what is terraform init
7. what happens when you execute terraform init 
8. what terraform validate command does 
9. what is the difference between terraform validate and terraform plan 
10. what is the terraform.tfstate file 
11. where do you store the state file in your project 
12. if i want to deploy multiple resources with same template what is function we use
13. what is terraform datasources 
14. if i want to access/use the existing resources from portal what is the block type i need to use 
15. what is terraform modules 
16. what is terraform for_each 
17. what is terraform provisioners 
18. what are terraform workspaces 
19. what are the different type of terraform provisions 
20. what is the resource type that you will choose to create a windows virtual machine 
21. How do you differentiate when you have the same resource type in a single terraform template  
